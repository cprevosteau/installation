#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Sat Jan 30 13:46:56 2021
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 1  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

set biglybt_installer [lindex $argv 0]
set biglybt_app_dir [lindex $argv 1]
spawn sh $biglybt_installer
match_max 100000


while { true } {
  expect {
    timeout {puts "timed out"; exit}
    "jna.jar not found.*sudo apt-get -y install jna-java (Y/n) " { send -- "y\r" }
    "Where should BiglyBT be installed?\r
\\\[*\]\r
" { send -- "$biglybt_app_dir\r" }
    "Create a desktop icon?\r
Yes \\\[y, Enter\], No \\\[n\]\r
" { send -- "y\r" }
    "UI Mode\r
Sidebar \\\[1, Enter\], Tabbed (Old, Less Used, Classic UI) \\\[2\]\r
" { send -- "1\r" }
    "Clear Old Configuration?\r
Yes \\\[y\], No \\\[n, Enter\]\r
" { send -- "n\r" }
    "Which components should be installed?\r
1: uTorrent Migration \\\[*1\]\r
2: Swarm Discoveries \\\[*2\]\r
3: Mainline DHT \\\[*3\]\r
4: Message Sync \\\[*4\]\r
5: Location Provider \\\[*5\]\r
6: BiglyBT Remote Plugin \\\[*6\]\r
7: Tor Helper \\\[*7\]\r
8: I2P Helper \\\[*8\]\r
(To show the description of a component, please enter one of *1, *2, *3, *4, *5, *6, *7, *8)\r
Please enter a comma-separated list of the selected values or \\\[Enter\] for the default selection:\r
\\\[2,3,4,5,6\]\r
" { send -- "7\r" }
    "Run BiglyBT?\r
Yes \\\[y, Enter\], No \\\[n\]\r
" { send -- "n\r" }
    eof exit
  }
}
